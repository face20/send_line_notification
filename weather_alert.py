# ==============================================================================
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏à.‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ ‡∏ú‡πà‡∏≤‡∏ô LINE Official Account
# ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API (forecast) ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ü‡∏£‡∏µ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
# ==============================================================================

import os
import requests
import json
from datetime import datetime, timedelta

# --- 1. ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô ---
LAT = "15.0207"
LON = "100.3425"
LINE_TOKEN = os.environ.get("LINE_TOKEN") 
OWM_API_KEY = os.environ.get("OWM_API_KEY")

# !! ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ API ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ü‡∏£‡∏µ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô !!
OWM_API_URL = f"https://api.openweathermap.org/data/2.5/forecast?lat={LAT}&lon={LON}&appid={OWM_API_KEY}&units=metric&lang=th"
LINE_BROADCAST_URL = "https://api.line.me/v2/bot/message/broadcast"


# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ---

def get_weather_forecast():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å API ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà"""
    try:
        response = requests.get(OWM_API_URL)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {e}")
        return None

def get_cute_rain_description(weather_id, description, pop):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ù‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÜ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)"""
    pop_str = f"({pop:.0f}%)"
    if weather_id // 100 == 2:
        return f"‡∏£‡∏∞‡∏ß‡∏±‡∏á! ‡∏°‡∏µ‡∏û‡∏≤‡∏¢‡∏∏‡πÄ‡∏Ç‡πâ‡∏≤ ‚õàÔ∏è {pop_str}"
    if weather_id in [502, 503, 504, 521, 522]:
        return f"‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏ß‡πä‡∏≤‡∏Å‡∏Å üåßÔ∏è {pop_str}"
    if weather_id == 501:
        return f"‡∏ù‡∏ô‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ô‡∏∞ üíß {pop_str}"
    return f"{description} {pop_str}"

def format_weather_message(forecast):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á API ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà"""
    alert_parts = []
    
    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏î‡∏î‡∏£‡πâ‡∏≠‡∏ô (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 24 ‡∏ä‡∏°. ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤) ---
    # API ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ UV ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡∏ô
    max_temp = -99
    forecast_list = forecast.get('list', [])[:8] # ‡πÄ‡∏≠‡∏≤ 8 ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ = 24 ‡∏ä‡∏°.
    for period in forecast_list:
        if period['main']['temp_max'] > max_temp:
            max_temp = period['main']['temp_max']

    if max_temp > 38:
        heat_message = (
            f"‚òÄÔ∏è *‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î!*\n\n"
            f"ü•µ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏à‡∏û‡∏∏‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ñ‡∏∂‡∏á {max_temp:.1f}¬∞C ‡πÉ‡∏ô 24 ‡∏ä‡∏°. ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤\n\n"
            f"‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡∏ô‡πâ‡∏≤ üòé"
        )
        alert_parts.append(heat_message)

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ù‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ---
    first_significant_rain_event = None
    for period in forecast_list: # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
        pop = period.get('pop', 0) * 100
        weather_id = period.get('weather', [{}])[0].get('id', 0)
        
        is_significant = False
        if weather_id // 100 == 2 and pop >= 40: is_significant = True
        elif weather_id in [502, 503, 504, 521, 522] and pop >= 50: is_significant = True
        elif weather_id == 501 and pop >= 70: is_significant = True
        
        if is_significant:
            dt_object = datetime.fromtimestamp(period['dt']) + timedelta(hours=7)
            description = period.get('weather', [{}])[0].get('description', '')
            
            first_significant_rain_event = {
                "time": dt_object.strftime('%H:%M ‡∏ô.'),
                "cute_desc": get_cute_rain_description(weather_id, description, pop)
            }
            break

    if first_significant_rain_event:
        rain_message = (
            f"‚òîÔ∏è *‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡πà‡∏°‡∏î‡πà‡∏ß‡∏ô! ‡∏ù‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤!*\n\n"
            f"‚è∞ ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏Å‡∏ä‡πà‡∏ß‡∏á *{first_significant_rain_event['time']}*\n"
            f"‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞: {first_significant_rain_event['cute_desc']}\n\n"
            f"‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏Å‡∏î‡πà‡∏ß‡∏ô! ‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏µ‡∏ö‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤ üëïüëñ"
        )
        alert_parts.append(rain_message)

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ---
    if not alert_parts:
        print("‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ô‡πà‡∏≤‡∏´‡πà‡∏ß‡∏á ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡πâ‡∏≤~")
        return None

    now_thai = datetime.now().strftime('%H:%M ‡∏ô.')
    city_name = forecast.get('city', {}).get('name', '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ')
    header = f"üìç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏≤‡∏Å‡∏≤‡∏® | {city_name}\n(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {now_thai})"
    separator = "\n\n- - - - - - - - - - - - - - -\n\n"
    final_message = f"\n{header}\n\n" + separator.join(alert_parts)
    
    return final_message

def send_line_notification(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° LINE OA ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"""
    if not message or not LINE_TOKEN:
        return
    headers = {"Authorization": f"Bearer {LINE_TOKEN}", "Content-Type": "application/json"}
    data = {"messages": [{"type": "text", "text": message}]}
    try:
        response = requests.post(LINE_BROADCAST_URL, headers=headers, data=json.dumps(data))
        response.raise_for_status()
        print("‡∏™‡πà‡∏á Broadcast ‡πÄ‡∏Ç‡πâ‡∏≤ LINE OA ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
    except requests.exceptions.RequestException as e:
        print(f"‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå! ‡∏™‡πà‡∏á Broadcast ‡πÄ‡∏Ç‡πâ‡∏≤ LINE OA ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e.response.text}")

# --- 3. ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ---
if __name__ == "__main__":
    print("===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® =====")
    weather_data = get_weather_forecast()
    if weather_data:
        notification_message = format_weather_message(weather_data)
        if notification_message:
            send_line_notification(notification_message)
    print("===== ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô =====")
